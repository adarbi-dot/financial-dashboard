<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Financial Wellness Dashboard</title>
  <!-- Tailwind CSS CDN for styling -->
  <script src="https://cdn.tailwindcss.com"></script>
  <!-- Inter font for a clean, modern look -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700;800&display=swap">
  <!-- React and ReactDOM CDNs -->
  <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
  <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
  <!-- Babel for transpiling JSX -->
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  <!-- Chart.js CDN for data visualization -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <!-- Firebase JS SDK -->
  <script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
    import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
    import { getFirestore, collection, onSnapshot, addDoc, doc, deleteDoc, setDoc, query, orderBy, updateDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
    window.firebase = { initializeApp, getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged, getFirestore, collection, onSnapshot, addDoc, doc, deleteDoc, setDoc, query, orderBy, updateDoc };
  </script>
  <style>
    body {
        font-family: 'Inter', sans-serif;
    }
    .chat-bubble {
        animation: fadeIn 0.3s ease-in-out;
    }
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(5px); }
        to { opacity: 1; transform: translateY(0); }
    }
  </style>
</head>
<body class="bg-slate-900 font-inter text-gray-200">
  <div id="root"></div>

  <!-- Main React Application -->
  <script type="text/babel">
    const { useState, useEffect, useMemo, useRef } = React;

    // A set of simple SVG icon components to avoid external dependencies
    const DollarSign = ({ className }) => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}><line x1="12" y1="1" x2="12" y2="23"></line><path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path></svg>;
    const ChevronRight = ({ className }) => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}><path d="M9 18l6-6-6-6"></path></svg>;
    const UploadCloud = ({ className }) => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 1 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}><path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"></path><path d="M12 12v9"></path><path d="M16 16l-4-4-4 4"></path></svg>;
    const Loader2 = ({ className }) => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}><path d="M21 12a9 9 0 1 1-6.219-8.56"></path></svg>;
    const Trash2 = ({ className }) => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}><path d="M3 6h18"></path><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path><line x1="10" y1="11" x2="10" y2="17"></line><line x1="14" y1="11" x2="14" y2="17"></line></svg>;
    const Sparkles = ({ className }) => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}><path d="M12 1v4"></path><path d="M17.65 6.35l-2.79 2.79"></path><path d="M21 12h-4"></path><path d="M17.65 17.65l-2.79-2.79"></path><path d="M12 21v-4"></path><path d="M6.35 17.65l2.79-2.79"></path><path d="M3 12h4"></path><path d="M6.35 6.35l2.79 2.79"></path></svg>;
    const Landmark = ({ className }) => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}><line x1="3" y1="22" x2="21" y2="22"></line><path d="M6 18v-8"></path><path d="M10 18v-4"></path><path d="M14 18v-6"></path><path d="M18 18V2"></path><path d="M6 10l-4 4v7h20v-7l-4-4"></path></svg>;
    const Wallet = ({ className }) => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}><path d="M19 7V4a1 1 0 0 0-1-1H5a2 2 0 0 0 0 4h15a1 1 0 0 1 1 1v4h-3a2 2 0 0 0 0 4h3v2a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V3"></path><path d="M16 17a2 2 0 0 0 0-4h-4a2 2 0 0 0 0 4"></path></svg>;
    const BarChart = ({ className }) => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}><line x1="12" y1="20" x2="12" y2="10"></line><line x1="18" y1="20" x2="18" y2="4"></line><line x1="6" y1="20" x2="6" y2="16"></line></svg>;
    const Edit = ({ className }) => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}><path d="M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path></svg>;
    const MessageCircle = ({ className }) => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}><path d="M7.9 20A9.32 9.32 0 0 1 4 16c0-2.8.5-5.6 2-8 1.5-2.4 3.5-4.4 6-6 2.5 1.6 4.5 3.6 6 6s2 5.2 2 8a9.32 9.32 0 0 1-3.9 4"></path><path d="M12 12l-2-2"></path><path d="M16 16l-2-2"></path></svg>;
    const FileText = ({ className }) => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><line x1="10" y1="9" x2="8" y2="9"></line></svg>;
    const Bot = ({ className }) => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}><path d="M12 8a4 4 0 0 0-4 4v2a2 2 0 0 1 2 2h4a2 2 0 0 1 2-2v-2a4 4 0 0 0-4-4z"></path><path d="M16 16s-1.5-2-4-2-4 2-4 2"></path><path d="M21.2 8.4c-1.3-3.2-4.1-5.6-7.5-6.1A6.6 6.6 0 0 0 12 2.1c-1.4 0-2.8.4-4.1 1.2-3.4.5-6.2 2.9-7.5 6.1-1.3 3.2-.8 6.9 1.2 9.7s5.1 4.7 9.1 4.7c4 0 7.1-2 9.1-4.7 2-2.8 2.5-6.5 1.2-9.7z"></path></svg>;
    const User = ({ className }) => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}><path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"></path><circle cx="12" cy="7" r="4"></circle></svg>;
    const Send = ({ className }) => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}><line x1="22" y1="2" x2="11" y2="13"></line><polygon points="22 2 15 22 11 13 2 9 22 2"></polygon></svg>;
    const Download = ({ className }) => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="7 10 12 15 17 10"></polyline><line x1="12" y1="15" x2="12" y2="3"></line></svg>;

    // Hard-coded exchange rates (for demonstration purposes)
    const exchangeRates = {
        'USD': 1, 'AED': 3.67, 'EUR': 1.08, 'GBP': 1.25, 'JPY': 0.0065, 'CAD': 0.73, 'AUD': 0.67, 'CNY': 0.14, 'SAR': 0.27
    };

    // Predefined categories for different transaction types
    const categories = {
      'Personal Expense': ['Groceries', 'Rent', 'Utilities', 'Entertainment', 'Transportation', 'Subscriptions', 'Other Personal'],
      'Business Expense': ['Software', 'Freelance Tools', 'Co-working Space', 'Marketing', 'Education', 'Other Business'],
      'Income': ['Client Work', 'Bonus', 'Tips', 'Salary', 'Other Income']
    };
    
    // Predefined list of currencies
    const currencies = [
      { code: 'USD', symbol: '$' }, { code: 'AED', symbol: 'د.إ' }, { code: 'EUR', symbol: '€' },
      { code: 'GBP', symbol: '£' }, { code: 'JPY', symbol: '¥' }, { code: 'CAD', symbol: 'C$' },
      { code: 'AUD', symbol: 'A$' }, { code: 'CNY', symbol: '¥' }, { code: 'SAR', symbol: 'ر.س' }
    ];
    
    // Function to get currency symbol from its code
    const getSymbol = (code) => {
        const currency = currencies.find(c => c.code === code);
        return currency ? currency.symbol : '';
    };

    // Mortgage Calculator component
    const MortgageCalculator = () => {
      const [principal, setPrincipal] = useState(250000);
      const [interestRate, setInterestRate] = useState(4.5);
      const [loanTerm, setLoanTerm] = useState(30);
      const [extraPayment, setExtraPayment] = useState(0);
      const [results, setResults] = useState(null);

      const calculateMortgage = () => {
        const P = parseFloat(principal);
        const R = parseFloat(interestRate) / 100 / 12; // Monthly interest rate
        const N = parseFloat(loanTerm) * 12; // Total number of payments (months)
        const extraPmt = parseFloat(extraPayment);
        
        if (P <= 0 || R <= 0 || N <= 0) {
          setResults(null);
          return;
        }

        const monthlyPayment = P * (R * Math.pow(1 + R, N)) / (Math.pow(1 + R, N) - 1);
        
        let remainingBalance = P;
        let totalInterestPaid = 0;
        let totalInterestPaidWithExtra = 0;
        let termWithExtra = 0;
        
        // Calculate without extra payments
        let tempPrincipal = P;
        let tempInterest = 0;
        let tempMonths = 0;
        while (tempPrincipal > 0 && tempMonths < N) {
          tempInterest += tempPrincipal * R;
          tempPrincipal -= (monthlyPayment - (tempPrincipal * R));
          tempMonths++;
        }
        totalInterestPaid = tempInterest;
        
        // Calculate with extra payments
        let tempPrincipalExtra = P;
        let tempInterestExtra = 0;
        let tempMonthsExtra = 0;
        while (tempPrincipalExtra > 0) {
          const interestPortion = tempPrincipalExtra * R;
          const principalPortion = monthlyPayment - interestPortion + extraPmt;
          
          tempPrincipalExtra -= principalPortion;
          tempInterestExtra += interestPortion;
          tempMonthsExtra++;
        }
        totalInterestPaidWithExtra = tempInterestExtra;
        termWithExtra = tempMonthsExtra;

        setResults({
          monthlyPayment: monthlyPayment.toFixed(2),
          totalInterestPaid: totalInterestPaid.toFixed(2),
          totalInterestSaved: (totalInterestPaid - totalInterestPaidWithExtra).toFixed(2),
          totalMonthsSaved: N - termWithExtra,
          termWithExtra: Math.ceil(termWithExtra / 12)
        });
      };

      return (
        <div className="bg-slate-800 rounded-2xl p-6 shadow-xl lg:col-span-1">
          <h2 className="text-2xl font-bold mb-6 text-gray-100 flex items-center"><Landmark className="w-7 h-7 mr-2" />Mortgage Payoff Calculator</h2>
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-1 text-slate-400">Principal ($)</label>
              <input type="number" value={principal} onChange={(e) => setPrincipal(e.target.value)} className="w-full p-3 rounded-lg bg-slate-700 border border-slate-600 text-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500"/>
            </div>
            <div>
              <label className="block text-sm font-medium mb-1 text-slate-400">Interest Rate (%)</label>
              <input type="number" value={interestRate} onChange={(e) => setInterestRate(e.target.value)} step="0.01" className="w-full p-3 rounded-lg bg-slate-700 border border-slate-600 text-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500"/>
            </div>
            <div>
              <label className="block text-sm font-medium mb-1 text-slate-400">Loan Term (Years)</label>
              <input type="number" value={loanTerm} onChange={(e) => setLoanTerm(e.target.value)} className="w-full p-3 rounded-lg bg-slate-700 border border-slate-600 text-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500"/>
            </div>
            <div>
              <label className="block text-sm font-medium mb-1 text-slate-400">Extra Monthly Payment ($)</label>
              <input type="number" value={extraPayment} onChange={(e) => setExtraPayment(e.target.value)} step="0.01" className="w-full p-3 rounded-lg bg-slate-700 border border-slate-600 text-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500"/>
            </div>
            <button onClick={calculateMortgage} className="w-full bg-blue-600 text-white font-bold py-3 px-6 rounded-lg hover:bg-blue-700 transition-colors shadow-lg">
              Calculate Mortgage
            </button>
            {results && (
              <div className="mt-4 p-4 bg-slate-700 rounded-lg space-y-2">
                <p className="font-semibold text-green-400">Monthly Payment: ${results.monthlyPayment}</p>
                <p className="text-sm text-slate-300">Total Interest (without extra payments): ${results.totalInterestPaid}</p>
                <p className="text-sm text-slate-300">New Term: {results.termWithExtra} years</p>
                <p className="font-bold text-lg text-green-300">Total Interest Saved: ${results.totalInterestSaved}</p>
                <p className="font-bold text-lg text-green-300">Months Saved: {results.totalMonthsSaved}</p>
              </div>
            )}
          </div>
        </div>
      );
    };

    // AI Mortgage Insights component
    const AiMortgageInsights = () => {
        const [statementText, setStatementText] = useState('');
        const [insights, setInsights] = useState(null);
        const [isAnalyzing, setIsAnalyzing] = useState(false);

        const handleAnalyzeStatement = async () => {
            if (!statementText.trim()) {
                alert('Please paste your mortgage statement details.');
                return;
            }
            setIsAnalyzing(true);
            try {
                const prompt = `You are a professional financial advisor specializing in mortgages. Analyze the following mortgage statement data. Provide a detailed, actionable plan for the user to pay off their mortgage early, including specific strategies like the snowball or avalanche method, and explain how a small extra payment can make a big difference over time. Use a clear, encouraging tone.
                
                Mortgage Statement Data:
                ${statementText}
                `;

                const payload = {
                    contents: [{ role: 'user', parts: [{ text: prompt }] }],
                };
                
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=`;
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                
                const result = await response.json();
                const aiResponse = result.candidates[0].content.parts[0].text;
                setInsights(aiResponse.replace(/\*\*/g, '')); // Clean up markdown formatting
            } catch (error) {
                console.error("Error analyzing statement:", error);
                setInsights("An error occurred. Please try again with different data.");
            } finally {
                setIsAnalyzing(false);
            }
        };

        return (
            <div className="bg-slate-800 rounded-2xl p-6 shadow-xl lg:col-span-1">
                <h2 className="text-2xl font-bold mb-6 text-gray-100 flex items-center"><Sparkles className="w-7 h-7 mr-2" />AI Mortgage Insights</h2>
                <div className="space-y-4">
                    <p className="text-sm text-slate-400">Paste your mortgage statement details below, and our AI will provide personalized payoff strategies.</p>
                    <textarea 
                        value={statementText}
                        onChange={(e) => setStatementText(e.target.value)}
                        rows="6"
                        placeholder="Paste your mortgage principal, interest rate, and term here..."
                        className="w-full p-3 rounded-lg bg-slate-700 border border-slate-600 text-gray-200 placeholder-slate-500 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    ></textarea>
                    <button 
                        onClick={handleAnalyzeStatement}
                        disabled={isAnalyzing}
                        className={`w-full font-bold py-3 px-6 rounded-lg transition-colors shadow-lg ${isAnalyzing ? 'bg-blue-800 text-slate-500 cursor-not-allowed' : 'bg-blue-600 text-white hover:bg-blue-700'}`}
                    >
                        {isAnalyzing ? (
                            <>
                                <Loader2 className="animate-spin inline-block mr-2" /> Analyzing...
                            </>
                        ) : (
                            'Get Mortgage Insights'
                        )}
                    </button>
                    {insights && (
                        <div className="mt-4 p-4 bg-slate-700 rounded-lg space-y-2">
                            <p className="text-green-400 font-semibold">Your Personalized Plan:</p>
                            <p className="whitespace-pre-wrap text-slate-300">{insights}</p>
                        </div>
                    )}
                </div>
            </div>
        );
    };

    // Pie chart component to visualize spending by category
    const SpendingChart = ({ transactions, baseCurrency, exchangeRates, getSymbol }) => {
        const canvasRef = useRef(null);
        const chartRef = useRef(null);
        
        // Calculate spending totals for each category
        const categorySpending = useMemo(() => {
            const spending = {};
            transactions.forEach(t => {
                if (t.type !== 'Income') {
                    const convertedAmount = t.amount * (exchangeRates[t.currency] / exchangeRates[baseCurrency]);
                    spending[t.category] = (spending[t.category] || 0) + convertedAmount;
                }
            });
            return spending;
        }, [transactions, baseCurrency, exchangeRates]);

        // Effect hook to draw or update the chart whenever data changes
        useEffect(() => {
            if (!canvasRef.current || Object.keys(categorySpending).length === 0) {
                // Destroy old chart instance if data is empty
                if (chartRef.current) {
                    chartRef.current.destroy();
                    chartRef.current = null;
                }
                return;
            }

            const ctx = canvasRef.current.getContext('2d');
            const data = {
                labels: Object.keys(categorySpending),
                datasets: [{
                    data: Object.values(categorySpending),
                    backgroundColor: [
                        '#06b6d4', '#6366f1', '#a855f7', '#ec4899', '#f43f5e', '#ef4444',
                        '#f97316', '#eab308', '#22c55e', '#10b981', '#06b6d4', '#3b82f6'
                    ],
                    hoverBackgroundColor: [
                        '#22d3ee', '#818cf8', '#c084fc', '#f472b6', '#fb7185', '#f87171',
                        '#fb923c', '#facc15', '#4ade80', '#34d399', '#22d3ee', '#60a5fa'
                    ]
                }]
            };

            const options = {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'top',
                        labels: {
                            color: '#94a3b8' // Tailwind slate-400
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                let label = context.label || '';
                                if (label) {
                                    label += ': ';
                                }
                                if (context.parsed !== null) {
                                    label += getSymbol(baseCurrency) + context.parsed.toFixed(2);
                                }
                                return label;
                            }
                        }
                    }
                }
            };

            // Destroy the old chart instance if it exists before creating a new one
            if (chartRef.current) {
                chartRef.current.destroy();
            }

            // Create a new Chart instance
            chartRef.current = new Chart(ctx, {
                type: 'pie',
                data: data,
                options: options,
            });
        }, [categorySpending]);

        return (
            <div className="bg-slate-800 rounded-2xl p-6 shadow-xl flex-grow flex flex-col items-center">
                <h2 className="text-2xl font-bold mb-6 text-gray-100 flex items-center"><BarChart className="w-7 h-7 mr-2"/>Spending Breakdown</h2>
                <div className="relative w-full h-80">
                    <canvas ref={canvasRef}></canvas>
                </div>
            </div>
        );
    };
    
    // Function to handle the download of chat history
    const handleDownloadChat = (chatHistory) => {
        const chatString = chatHistory.map(msg => `${msg.role.toUpperCase()}: ${msg.content}`).join('\n\n');
        const blob = new Blob([chatString], { type: 'text/plain' });
        const a = document.createElement('a');
        a.href = URL.createObjectURL(blob);
        a.download = 'financial_coach_chat.txt';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
    };

    const App = () => {
      // State for managing all transactions, goals, and budgets
      const [transactions, setTransactions] = useState([]);
      const [goals, setGoals] = useState([]);
      const [budgets, setBudgets] = useState({});
      
      // State for the main forms
      const [date, setDate] = useState('');
      const [description, setDescription] = useState('');
      const [amount, setAmount] = useState('');
      const [type, setType] = useState('Personal Expense');
      const [category, setCategory] = useState(categories['Personal Expense'][0]);
      const [currency, setCurrency] = useState('AED');
      const [editingTransactionId, setEditingTransactionId] = useState(null);
      
      // AI & Utility states
      const [message, setMessage] = useState('');
      const [pastedText, setPastedText] = useState('');
      const [isParsing, setIsParsing] = useState(false);
      const [aiRecommendations, setAiRecommendations] = useState([]);
      const [isGenerating, setIsGenerating] = useState(false);
      
      // NEW: State for AI debt resolution chat
      const chatEndRef = useRef(null);
      const [chatHistory, setChatHistory] = useState([]);
      const [chatInput, setChatInput] = useState('');
      const [isChatting, setIsChatting] = useState(false);
      
      // State for goals
      const [newGoalName, setNewGoalName] = useState('');
      const [newGoalTarget, setNewGoalTarget] = useState('');
      
      // State for budgets
      const [budgetInput, setBudgetInput] = useState('');
      const [selectedBudgetCategory, setSelectedBudgetCategory] = useState('Groceries');
      
      // State for file upload
      const [uploadedFile, setUploadedFile] = useState(null);

      // Firestore & Authentication states
      const [db, setDb] = useState(null);
      const [userId, setUserId] = useState(null);
      const [isLoading, setIsLoading] = useState(true);
      const [baseCurrency, setBaseCurrency] = useState('AED');

      // State for filtering and sorting
      const [filterType, setFilterType] = useState('All');
      const [sortBy, setSortBy] = useState('date');
      const [sortDirection, setSortDirection] = useState('desc');
      const [startDate, setStartDate] = useState('');
      const [endDate, setEndDate] = useState('');
      
      // Sample Data - to populate the dashboard on first load
      const sampleTransactions = [
          { id: 'sample-1', date: '2023-10-25', description: 'Monthly Salary', amount: 5000, type: 'Income', category: 'Salary', currency: 'AED' },
          { id: 'sample-2', date: '2023-10-26', description: 'Grocery Shopping', amount: 350, type: 'Personal Expense', category: 'Groceries', currency: 'AED' },
          { id: 'sample-3', date: '2023-10-27', description: 'Utilities Bill', amount: 600, type: 'Personal Expense', category: 'Utilities', currency: 'AED' },
          { id: 'sample-4', date: '2023-10-28', description: 'Freelance Project', amount: 1500, type: 'Income', category: 'Client Work', currency: 'USD' },
          { id: 'sample-5', date: '2023-10-29', description: 'Dinner with friends', amount: 120, type: 'Personal Expense', category: 'Entertainment', currency: 'AED' },
          { id: 'sample-6', date: '2023-10-30', description: 'Co-working space', amount: 800, type: 'Business Expense', category: 'Co-working Space', currency: 'AED' },
      ];

      // Scrolls the chat window to the bottom whenever a new message is added.
      useEffect(() => {
        if (chatEndRef.current) {
          chatEndRef.current.scrollTop = chatEndRef.current.scrollHeight;
        }
      }, [chatHistory]);
      

      // Initialize Firebase and set up authentication
      useEffect(() => {
        const initFirebase = async () => {
          try {
            const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
            const app = firebase.initializeApp(firebaseConfig);
            const firestore = firebase.getFirestore(app);
            const auth = firebase.getAuth(app);
            
            setDb(firestore);

            if (typeof __initial_auth_token !== 'undefined') {
              await firebase.signInWithCustomToken(auth, __initial_auth_token);
            } else {
              await firebase.signInAnonymously(auth);
            }

            firebase.onAuthStateChanged(auth, (user) => {
              if (user) {
                setUserId(user.uid);
                setIsLoading(false);
              } else {
                setUserId(crypto.randomUUID());
                setIsLoading(false);
              }
            });

          } catch (e) {
            console.error("Error initializing Firebase:", e);
            setMessage("Failed to initialize the app. Please try again later.");
            setIsLoading(false);
          }
        };
        initFirebase();
      }, []);

      // Set up real-time listener for transactions from Firestore
      useEffect(() => {
        if (!db || !userId) return;

        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const transactionCollectionRef = firebase.collection(db, `artifacts/${appId}/users/${userId}/transactions`);
        const q = firebase.query(transactionCollectionRef);

        const unsubscribe = firebase.onSnapshot(q, (snapshot) => {
          const fetchedTransactions = snapshot.docs.map(doc => ({
            id: doc.id,
            ...doc.data(),
            amount: Number(doc.data().amount), // Ensure amount is a number
          }));
          // Add sample data if the collection is empty
          if (fetchedTransactions.length === 0) {
              setTransactions(sampleTransactions);
          } else {
              setTransactions(fetchedTransactions);
          }
        }, (error) => {
          console.error("Error fetching transactions:", error);
          setMessage("Failed to load transactions.");
        });

        return () => unsubscribe();
      }, [db, userId]);
      
      // Set up real-time listener for goals from Firestore
      useEffect(() => {
        if (!db || !userId) return;

        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const goalsCollectionRef = firebase.collection(db, `artifacts/${appId}/users/${userId}/goals`);
        const q = firebase.query(goalsCollectionRef);

        const unsubscribe = firebase.onSnapshot(q, (snapshot) => {
          const fetchedGoals = snapshot.docs.map(doc => ({
            id: doc.id,
            ...doc.data(),
            targetAmount: Number(doc.data().targetAmount),
            currentAmount: Number(doc.data().currentAmount),
          }));
          setGoals(fetchedGoals);
        }, (error) => {
          console.error("Error fetching goals:", error);
          setMessage("Failed to load goals.");
        });

        return () => unsubscribe();
      }, [db, userId]);

      // Set up real-time listener for budgets from Firestore
      useEffect(() => {
        if (!db || !userId) return;
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const budgetsCollectionRef = firebase.collection(db, `artifacts/${appId}/users/${userId}/budgets`);
        const unsubscribe = firebase.onSnapshot(budgetsCollectionRef, (snapshot) => {
            const fetchedBudgets = {};
            snapshot.docs.forEach(doc => {
                fetchedBudgets[doc.id] = doc.data().amount;
            });
            setBudgets(fetchedBudgets);
        }, (error) => {
            console.error("Error fetching budgets:", error);
        });
        return () => unsubscribe();
      }, [db, userId]);

      // Handle form submission (add or edit transaction)
      const handleAddOrUpdateTransaction = async (e) => {
        e.preventDefault();
        if (!date || !description || !amount || parseFloat(amount) <= 0 || !db || !userId) {
          setMessage('Please fill out all fields with valid data.');
          return;
        }

        const transactionData = {
          date,
          description,
          amount: parseFloat(amount),
          type,
          category,
          currency,
        };

        try {
          if (editingTransactionId) {
            // Update an existing transaction
            const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
            const transactionRef = firebase.doc(db, `artifacts/${appId}/users/${userId}/transactions`, editingTransactionId);
            await firebase.updateDoc(transactionRef, transactionData);
            setMessage('Transaction updated successfully!');
            setEditingTransactionId(null); // Clear editing state
          } else {
            // Add a new transaction
            const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
            await firebase.addDoc(firebase.collection(db, `artifacts/${appId}/users/${userId}/transactions`), transactionData);
            setMessage('Transaction added successfully!');
          }
          // Reset form fields
          setDate('');
          setDescription('');
          setAmount('');
          setType('Personal Expense');
          setCategory(categories['Personal Expense'][0]);
          setCurrency('AED');
        } catch (e) {
          console.error("Error saving transaction:", e);
          setMessage("Failed to save transaction. Please try again.");
        }
      };

      // Function to handle adding a new budget
      const handleAddBudget = async (e) => {
        e.preventDefault();
        if (!selectedBudgetCategory || !budgetInput || parseFloat(budgetInput) <= 0 || !db || !userId) {
          setMessage('Please select a category and enter a valid budget amount.');
          return;
        }
        
        try {
          const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
          await firebase.setDoc(firebase.doc(db, `artifacts/${appId}/users/${userId}/budgets`, selectedBudgetCategory), {
              amount: parseFloat(budgetInput)
          });
          setMessage(`Budget for ${selectedBudgetCategory} added successfully!`);
          setBudgetInput('');
        } catch (e) {
          console.error("Error adding budget:", e);
          setMessage("Failed to add budget.");
        }
      };

      // Function to delete a transaction from Firestore
      const handleDeleteTransaction = async (id) => {
        if (!db || !userId) return;
        try {
          const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
          await firebase.deleteDoc(firebase.doc(db, `artifacts/${appId}/users/${userId}/transactions`, id));
          setMessage("Transaction deleted successfully!");
        } catch (e) {
          console.error("Error deleting transaction:", e);
          setMessage("Failed to delete transaction.");
        }
      };

      // Function to start editing a transaction
      const handleEditTransaction = (transaction) => {
          setEditingTransactionId(transaction.id);
          setDate(transaction.date);
          setDescription(transaction.description);
          setAmount(transaction.amount);
          setType(transaction.type);
          setCategory(transaction.category);
          setCurrency(transaction.currency);
      };

      const handleDeleteGoal = async (id) => {
        if (!db || !userId) return;
        try {
          const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
          await firebase.deleteDoc(firebase.doc(db, `artifacts/${appId}/users/${userId}/goals`, id));
          setMessage("Goal deleted successfully!");
        } catch (e) {
          console.error("Error deleting goal:", e);
          setMessage("Failed to delete goal.");
        }
      };

      // Function to handle adding a new goal
      const handleAddGoal = async (e) => {
        e.preventDefault();
        if (!newGoalName.trim() || !newGoalTarget || parseFloat(newGoalTarget) <= 0 || !db || !userId) {
          setMessage('Please enter a goal name and a valid target amount.');
          return;
        }
        try {
          const newGoal = {
            name: newGoalName,
            targetAmount: parseFloat(newGoalTarget),
            currentAmount: 0,
            createdAt: new Date().toISOString(),
          };
          const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
          await firebase.addDoc(firebase.collection(db, `artifacts/${appId}/users/${userId}/goals`), newGoal);
          setMessage('Goal added successfully!');
          setNewGoalName('');
          setNewGoalTarget('');
        } catch (e) {
          console.error("Error adding goal:", e);
          setMessage("Failed to add goal. Please try again.");
        }
      };

      // Helper function to format date string to YYYY-MM-DD
      const formatDate = (dateString) => {
        const date = new Date(dateString);
        if (isNaN(date.getTime())) {
          console.error("Invalid date format:", dateString);
          return dateString; // Return original string if invalid
        }
        return date.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });
      };

      // Function to handle parsing of pasted text using LLM, now with file upload support
      const handleParseText = async () => {
        const textToParse = pastedText;

        if (!textToParse.trim() || !db || !userId) {
          setMessage('Please paste text to parse.');
          return;
        }
        setIsParsing(true);
        setMessage('Parsing transactions... Please wait.');
        try {
          const prompt = `Extract transaction data from the following text and return a JSON array. For each object, include a 'date' (formatted as YYYY-MM-DD), 'description' (string), 'amount' (number), 'type' ('Income', 'Personal Expense', or 'Business Expense'), 'category' (choose from: ${Object.values(categories).flat().join(', ')}), and 'currency' (e.g., 'AED'). Ensure the date is correctly converted to YYYY-MM-DD format, regardless of the original format (e.g., M/D/YYYY, D-M-YYYY, Month D, YYYY).
          
          Text:
          ${textToParse}
          `;

          const payload = {
              contents: [{
                  role: "user",
                  parts: [{ text: prompt }]
              }],
              generationConfig: {
                  responseMimeType: "application/json",
                  responseSchema: {
                      type: "ARRAY",
                      items: {
                          type: "OBJECT",
                          properties: {
                              "date": { "type": "STRING" },
                              "description": { "type": "STRING" },
                              "amount": { "type": "NUMBER" },
                              "type": { "type": "STRING" },
                              "category": { "type": "STRING" },
                              "currency": { "type": "STRING" }
                          },
                          "propertyOrdering": ["date", "description", "amount", "type", "category", "currency"]
                      }
                  }
              }
          };

          const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=`;
          const response = await fetch(apiUrl, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(payload)
          });

          if (!response.ok) {
              const errorText = await response.text();
              console.error("API error:", errorText);
              setMessage("Error parsing text. Please try again.");
              setIsParsing(false);
              return;
          }

          const result = await response.json();
          const jsonText = result.candidates[0].content.parts[0].text;
          const parsedTransactions = JSON.parse(jsonText);
          
          let transactionsAdded = 0;
          for (const transaction of parsedTransactions) {
            // Robust date validation and re-formatting
            const transactionDate = new Date(transaction.date);
            if (!isNaN(transactionDate.getTime())) {
              transaction.date = transactionDate.toISOString().split('T')[0];
            } else {
              console.warn("Skipping transaction due to invalid date:", transaction);
              continue;
            }

            if (transaction.description && transaction.amount > 0) {
              const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
              await firebase.addDoc(firebase.collection(db, `artifacts/${appId}/users/${userId}/transactions`), transaction);
              transactionsAdded++;
            }
          }

          setMessage(`Successfully parsed and added ${transactionsAdded} transactions!`);
          setPastedText('');
          setUploadedFile(null);
        } catch (error) {
          console.error("Error during parsing:", error);
          setMessage("Failed to parse text. Please check the format and try again.");
        } finally {
          setIsParsing(false);
        }
      };
      
      // Handle sending a message to the AI financial coach
      const handleSendMessage = async () => {
        if (isChatting || !chatInput.trim()) return;
        
        const userMessage = { role: 'user', content: chatInput };
        const newChatHistory = [...chatHistory, userMessage];
        setChatHistory(newChatHistory);
        setChatInput('');
        setIsChatting(true);
        
        try {
            const prompt = `You are a highly professional and empathetic financial coach. Your goal is to provide clear, actionable, and encouraging advice. Avoid technical jargon where possible, and always explain your reasoning. Use bullet points and paragraphs for readability. Do not use Markdown formatting for bolding (e.g., **text**).
            
            Based on the following conversation and financial data, answer the user's question. Focus on their specific needs and provide thoughtful insights into their spending, saving, and financial goals.
            
            Financial data summary:
            Total Income: ${totals.income} ${baseCurrency}
            Total Expenses: ${totals.expense} ${baseCurrency}
            Transactions (sample): ${JSON.stringify(transactions.slice(0, 10).map(t => ({ date: t.date, description: t.description, amount: t.amount, type: t.type })))}
            
            Conversation history:
            ${newChatHistory.map(msg => `${msg.role === 'user' ? 'User' : 'Assistant'}: ${msg.content}`).join('\n')}
            
            Assistant:`;

            const payload = {
                contents: [{
                    role: 'user',
                    parts: [{ text: prompt }]
                }]
            };

            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=`;
            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                const errorText = await response.text();
                console.error("API error:", errorText);
                setChatHistory(prev => [...prev, { role: 'assistant', content: 'Sorry, I am unable to provide advice right now. Please try again later.' }]);
                setIsChatting(false);
                return;
            }

            const result = await response.json();
            const aiMessage = result.candidates[0].content.parts[0].text.replace(/\*\*/g, ''); // Remove Markdown bolding
            setChatHistory(prev => [...prev, { role: 'assistant', content: aiMessage }]);
        } catch (error) {
            console.error("Error in chat:", error);
            setChatHistory(prev => [...prev, { role: 'assistant', content: 'An unexpected error occurred. Please try again.' }]);
        } finally {
            setIsChatting(false);
        }
      };

      // Filter and sort transactions based on state
      const filteredAndSortedTransactions = useMemo(() => {
        let filtered = transactions.filter(t => {
          const transactionDate = new Date(t.date);
          const start = startDate ? new Date(startDate) : null;
          const end = endDate ? new Date(endDate) : null;
          
          if (filterType !== 'All' && t.type !== filterType) {
            return false;
          }
          if (start && transactionDate < start) {
            return false;
          }
          if (end && transactionDate > end) {
            return false;
          }
          return true;
        });

        // Sort the filtered transactions
        filtered.sort((a, b) => {
          let aValue, bValue;
          switch (sortBy) {
            case 'date':
              aValue = new Date(a.date);
              bValue = new Date(b.date);
              break;
            case 'description':
              aValue = a.description.toLowerCase();
              bValue = b.description.toLowerCase();
              break;
            case 'amount':
              aValue = a.amount;
              bValue = b.amount;
              break;
            case 'type':
              aValue = a.type.toLowerCase();
              bValue = b.type.toLowerCase();
              break;
            case 'category':
              aValue = a.category.toLowerCase();
              bValue = b.category.toLowerCase();
              break;
            default:
              return 0;
          }

          if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;
          if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;
          return 0;
        });

        return filtered;
      }, [transactions, filterType, startDate, endDate, sortBy, sortDirection]);

      // Calculate totals and budget progress based on filtered data
      const totals = useMemo(() => {
        let totalIncome = 0;
        let totalExpense = 0;
        const budgetProgress = {};

        // Initialize budgetProgress
        Object.keys(budgets).forEach(cat => {
            budgetProgress[cat] = { spent: 0, budget: budgets[cat] };
        });

        filteredAndSortedTransactions.forEach(t => {
          const convertedAmount = t.amount * (exchangeRates[t.currency] / exchangeRates[baseCurrency]);
          if (t.type === 'Income') {
            totalIncome += convertedAmount;
          } else {
            totalExpense += convertedAmount;
            if (budgetProgress[t.category]) {
                budgetProgress[t.category].spent += convertedAmount;
            }
          }
        });

        return {
          income: totalIncome.toFixed(2),
          expense: totalExpense.toFixed(2),
          net: (totalIncome - totalExpense).toFixed(2),
          budgetProgress,
        };
      }, [filteredAndSortedTransactions, budgets, baseCurrency]);

      if (isLoading) {
        return (
          <div className="flex items-center justify-center min-h-screen bg-slate-900 text-gray-400">
            <Loader2 className="w-10 h-10 animate-spin mr-3"/>
            <p>Loading your dashboard...</p>
          </div>
        );
      }
      
      const getGoalsProgress = (goal) => {
        const progress = Math.min(goal.currentAmount / goal.targetAmount, 1);
        return (progress * 100).toFixed(0);
      };

      return (
        <div className="p-4 md:p-8 lg:p-12 space-y-8 bg-slate-900 min-h-screen text-gray-200">
          <div className="flex justify-between items-center flex-wrap gap-4">
            <h1 className="text-4xl md:text-5xl font-extrabold text-white leading-tight">
              Financial Wellness Dashboard
            </h1>
            <div className="text-sm text-slate-400">
                User ID: {userId}
            </div>
          </div>
          
          {message && (
            <div className="bg-blue-600 text-white p-4 rounded-lg shadow-md mb-4 flex justify-between items-center transition-opacity duration-300">
              <span>{message}</span>
              <button onClick={() => setMessage('')} className="ml-4 text-white hover:text-blue-200 font-bold">
                &times;
              </button>
            </div>
          )}

          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
            <div className="bg-slate-800 rounded-2xl p-6 shadow-xl flex flex-col justify-between">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-xl font-bold text-gray-100">Total Income</h3>
                <div className="flex items-center">
                    <DollarSign className="w-8 h-8 text-green-400 mr-2"/>
                    <select value={baseCurrency} onChange={(e) => setBaseCurrency(e.target.value)} className="bg-slate-700 text-white p-2 rounded-lg text-sm">
                        {currencies.map(c => <option key={c.code} value={c.code}>{c.code}</option>)}
                    </select>
                </div>
              </div>
              <p className="text-4xl font-extrabold text-green-400">{getSymbol(baseCurrency)}{totals.income}</p>
              <p className="text-sm text-slate-400">Total earnings this period.</p>
            </div>

            <div className="bg-slate-800 rounded-2xl p-6 shadow-xl flex flex-col justify-between">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-xl font-bold text-gray-100">Total Expenses</h3>
                <Wallet className="w-8 h-8 text-red-400"/>
              </div>
              <p className="text-4xl font-extrabold text-red-400">{getSymbol(baseCurrency)}{totals.expense}</p>
              <p className="text-sm text-slate-400">Total money spent this period.</p>
            </div>

            <div className="bg-slate-800 rounded-2xl p-6 shadow-xl flex flex-col justify-between">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-xl font-bold text-gray-100">Net Flow</h3>
                <BarChart className="w-8 h-8 text-blue-400"/>
              </div>
              <p className="text-4xl font-extrabold text-blue-400">{getSymbol(baseCurrency)}{totals.net}</p>
              <p className="text-sm text-slate-400">Income minus expenses.</p>
            </div>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <div className="lg:col-span-2 space-y-8">
              {/* Transactions Section */}
              <div className="bg-slate-800 rounded-2xl p-6 shadow-xl">
                <h2 className="text-2xl font-bold mb-6 text-gray-100">{editingTransactionId ? 'Edit Transaction' : 'Add New Transaction'}</h2>
                <form onSubmit={handleAddOrUpdateTransaction} className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium mb-1 text-slate-400">Date</label>
                    <input type="date" value={date} onChange={(e) => setDate(e.target.value)} className="w-full p-3 rounded-lg bg-slate-700 border border-slate-600 text-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500"/>
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-1 text-slate-400">Description</label>
                    <input type="text" value={description} onChange={(e) => setDescription(e.target.value)} placeholder="e.g., Coffee at Starbucks" className="w-full p-3 rounded-lg bg-slate-700 border border-slate-600 text-gray-200 placeholder-slate-500 focus:outline-none focus:ring-2 focus:ring-blue-500"/>
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-1 text-slate-400">Amount</label>
                    <input type="number" value={amount} onChange={(e) => setAmount(e.target.value)} step="0.01" placeholder="e.g., 4.50" className="w-full p-3 rounded-lg bg-slate-700 border border-slate-600 text-gray-200 placeholder-slate-500 focus:outline-none focus:ring-2 focus:ring-blue-500"/>
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-1 text-slate-400">Type</label>
                    <select value={type} onChange={(e) => { setType(e.target.value); setCategory(categories[e.target.value][0]); }} className="w-full p-3 rounded-lg bg-slate-700 border border-slate-600 text-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500">
                      {Object.keys(categories).map(t => (
                        <option key={t} value={t}>{t}</option>
                      ))}
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-1 text-slate-400">Category</label>
                    <select value={category} onChange={(e) => setCategory(e.target.value)} className="w-full p-3 rounded-lg bg-slate-700 border border-slate-600 text-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500">
                      {categories[type].map(c => (
                        <option key={c} value={c}>{c}</option>
                      ))}
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-1 text-slate-400">Currency</label>
                    <select value={currency} onChange={(e) => setCurrency(e.target.value)} className="w-full p-3 rounded-lg bg-slate-700 border border-slate-600 text-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500">
                      {currencies.map(c => (
                        <option key={c.code} value={c.code}>{c.code}</option>
                      ))}
                    </select>
                  </div>
                  <div className="md:col-span-2 mt-4 flex justify-between gap-4">
                    <button type="submit" className="w-full bg-green-600 text-white font-bold py-3 px-6 rounded-lg hover:bg-green-700 transition-colors shadow-lg">
                      {editingTransactionId ? 'Update Transaction' : 'Add Transaction'}
                    </button>
                    {editingTransactionId && (
                        <button type="button" onClick={() => setEditingTransactionId(null)} className="w-full bg-red-600 text-white font-bold py-3 px-6 rounded-lg hover:bg-red-700 transition-colors shadow-lg">
                            Cancel Edit
                        </button>
                    )}
                  </div>
                </form>
              </div>

              {/* Smart Document Importer Section */}
              <div className="bg-slate-800 rounded-2xl p-6 shadow-xl">
                <h2 className="text-2xl font-bold mb-6 text-gray-100 flex items-center"><FileText className="w-7 h-7 mr-2"/>Smart Document Importer</h2>
                <div className="space-y-4">
                  <p className="text-sm text-slate-400">Paste transaction data from a text file or Excel spreadsheet below. The AI will automatically parse and add them to your dashboard.</p>
                  <textarea value={pastedText} onChange={(e) => setPastedText(e.target.value)} rows="4" placeholder="Paste data from a text file or Excel sheet here..." className="w-full p-3 rounded-lg bg-slate-700 border border-slate-600 text-gray-200 placeholder-slate-500 focus:outline-none focus:ring-2 focus:ring-blue-500"></textarea>
                  <button onClick={handleParseText} disabled={isParsing} className={`w-full font-bold py-3 px-6 rounded-lg transition-colors shadow-lg ${isParsing ? 'bg-blue-800 text-slate-500 cursor-not-allowed' : 'bg-blue-600 text-white hover:bg-blue-700'}`}>
                    {isParsing ? (
                        <>
                        <Loader2 className="animate-spin inline-block mr-2"/> Parsing...
                        </>
                    ) : (
                        <>
                        <UploadCloud className="inline-block mr-2"/> Parse Transactions
                        </>
                    )}
                  </button>
                </div>
              </div>

              {/* AI Financial Coach Section */}
              <div className="bg-slate-800 rounded-2xl p-6 shadow-xl">
                <div className="flex justify-between items-center mb-6">
                    <h2 className="text-2xl font-bold text-gray-100 flex items-center"><Bot className="w-7 h-7 mr-2"/>AI Financial Coach</h2>
                    <button
                        onClick={() => handleDownloadChat(chatHistory)}
                        className="flex items-center gap-2 text-sm text-blue-400 hover:text-blue-200 transition-colors"
                        title="Export Chat"
                    >
                        <Download className="w-4 h-4" /> Export
                    </button>
                </div>
                <div className="flex flex-col h-96">
                    <div ref={chatEndRef} className="flex-1 overflow-y-auto p-4 bg-slate-700 rounded-lg mb-4 space-y-4">
                        {chatHistory.length === 0 && (
                            <div className="text-center text-slate-400">
                                Start a conversation with your financial coach to get personalized advice.
                            </div>
                        )}
                        {chatHistory.map((message, index) => (
                            <div key={index} className={`flex items-start gap-2 chat-bubble ${message.role === 'user' ? 'justify-end' : ''}`}>
                                {message.role === 'assistant' && (
                                    <div className="flex-shrink-0">
                                        <Bot className="w-8 h-8 text-blue-400 p-1 bg-slate-800 rounded-full"/>
                                    </div>
                                )}
                                <div className={`p-3 rounded-lg shadow-md max-w-sm ${message.role === 'user' ? 'bg-blue-600 text-white self-end' : 'bg-slate-600 text-gray-100 self-start'}`}>
                                    {message.content.split('\n').map((line, i) => (
                                        <p key={i} className="mb-2 last:mb-0">{line}</p>
                                    ))}
                                </div>
                                {message.role === 'user' && (
                                    <div className="flex-shrink-0">
                                        <User className="w-8 h-8 text-green-400 p-1 bg-slate-800 rounded-full"/>
                                    </div>
                                )}
                            </div>
                        ))}
                    </div>
                    <div className="flex items-center gap-2">
                        <input
                            type="text"
                            value={chatInput}
                            onChange={(e) => setChatInput(e.target.value)}
                            onKeyDown={(e) => {
                                if (e.key === 'Enter' && !isChatting) {
                                    handleSendMessage();
                                }
                            }}
                            placeholder="Ask a financial question..."
                            className="flex-1 p-3 rounded-lg bg-slate-700 border border-slate-600 text-gray-200 placeholder-slate-500 focus:outline-none focus:ring-2 focus:ring-blue-500"
                            disabled={isChatting}
                        />
                        <button
                            onClick={handleSendMessage}
                            disabled={isChatting || !chatInput.trim()}
                            className={`p-3 rounded-lg transition-colors shadow-lg ${isChatting || !chatInput.trim() ? 'bg-blue-800 text-slate-500 cursor-not-allowed' : 'bg-blue-600 text-white hover:bg-blue-700'}`}
                        >
                            <Send className="w-5 h-5"/>
                        </button>
                    </div>
                </div>
            </div>

              {/* Transactions Table */}
              <div className="bg-slate-800 rounded-2xl p-6 shadow-xl">
                <div className="flex justify-between items-center mb-6 flex-wrap gap-4">
                  <h2 className="text-2xl font-bold text-gray-100">Transaction History</h2>
                  <div className="flex flex-wrap items-center gap-4">
                    {/* Currency Selector */}
                    <select value={baseCurrency} onChange={(e) => setBaseCurrency(e.target.value)} className="w-auto p-3 rounded-lg bg-slate-700 border border-slate-600 text-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500">
                      {currencies.map(c => (<option key={c.code} value={c.code}>{c.code}</option>))}
                    </select>

                    {/* Filter by Type */}
                    <select value={filterType} onChange={(e) => setFilterType(e.target.value)} className="w-auto p-3 rounded-lg bg-slate-700 border border-slate-600 text-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <option value="All">All Types</option>
                        <option value="Income">Income</option>
                        <option value="Personal Expense">Personal Expense</option>
                        <option value="Business Expense">Business Expense</option>
                    </select>

                    {/* Filter by Date Range */}
                    <div className="flex items-center gap-2">
                      <input type="date" value={startDate} onChange={(e) => setStartDate(e.target.value)} className="w-auto p-3 rounded-lg bg-slate-700 border border-slate-600 text-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500" />
                      <span className="text-slate-400">to</span>
                      <input type="date" value={endDate} onChange={(e) => setEndDate(e.target.value)} className="w-auto p-3 rounded-lg bg-slate-700 border border-slate-600 text-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500" />
                    </div>
                  </div>
                </div>
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-slate-700">
                    <thead className="bg-slate-700">
                      <tr>
                        <th className="py-3 px-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider cursor-pointer" onClick={() => { setSortBy('date'); setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc'); }}>Date</th>
                        <th className="py-3 px-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider cursor-pointer" onClick={() => { setSortBy('description'); setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc'); }}>Description</th>
                        <th className="py-3 px-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider cursor-pointer" onClick={() => { setSortBy('type'); setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc'); }}>Type</th>
                        <th className="py-3 px-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider cursor-pointer" onClick={() => { setSortBy('category'); setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc'); }}>Category</th>
                        <th className="py-3 px-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider cursor-pointer" onClick={() => { setSortBy('amount'); setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc'); }}>Amount</th>
                        <th className="py-3 px-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Converted</th>
                        <th className="py-3 px-3 text-center text-xs font-medium text-slate-400 uppercase tracking-wider">Actions</th>
                      </tr>
                    </thead>
                    <tbody className="bg-slate-800 divide-y divide-slate-700">
                      {filteredAndSortedTransactions.length > 0 ? (
                        filteredAndSortedTransactions.map(t => (
                          <tr key={t.id} className="hover:bg-slate-700 transition-colors">
                            <td className="py-3 px-3 text-left whitespace-nowrap text-slate-300">{formatDate(t.date)}</td>
                            <td className="py-3 px-3 text-left text-slate-300">{t.description}</td>
                            <td className={`py-3 px-3 text-left font-bold ${t.type === 'Income' ? 'text-green-400' : 'text-red-400'}`}>{t.type}</td>
                            <td className="py-3 px-3 text-left text-slate-300">{t.category}</td>
                            <td className={`py-3 px-3 text-left font-bold ${t.type === 'Income' ? 'text-green-400' : 'text-red-400'}`}>
                              {getSymbol(t.currency)}{t.amount.toFixed(2)}
                            </td>
                            <td className={`py-3 px-3 text-left font-bold`}>
                              {getSymbol(baseCurrency)}{(t.amount * (exchangeRates[t.currency] / exchangeRates[baseCurrency])).toFixed(2)}
                            </td>
                            <td className="py-3 px-3 text-center">
                              <div className="flex items-center justify-center gap-2">
                                <button onClick={() => handleEditTransaction(t)} className="text-blue-400 hover:text-blue-500 transition-colors transform hover:scale-110">
                                  <Edit className="w-5 h-5" />
                                </button>
                                <button onClick={() => handleDeleteTransaction(t.id)} className="text-red-400 hover:text-red-500 transition-colors transform hover:scale-110">
                                  <Trash2 className="w-5 h-5" />
                                </button>
                              </div>
                            </td>
                          </tr>
                        ))
                      ) : (
                        <tr>
                          <td colSpan="7" className="py-6 text-center text-slate-400">No transactions match your criteria.</td>
                        </tr>
                      )}
                    </tbody>
                  </table>
                </div>
              </div>
            </div>

            <div className="lg:col-span-1 space-y-8">
              {/* Spending Chart Section */}
              <SpendingChart
                transactions={transactions}
                baseCurrency={baseCurrency}
                exchangeRates={exchangeRates}
                getSymbol={getSymbol}
              />

              {/* Savings Goals Section */}
              <div className="bg-slate-800 rounded-2xl p-6 shadow-xl">
                <h2 className="text-2xl font-bold mb-6 text-gray-100 flex items-center"><Wallet className="w-7 h-7 mr-2"/>Savings Goals</h2>
                <div className="space-y-4">
                  <div className="space-y-2">
                    {goals.length > 0 ? (
                      goals.map(goal => (
                        <div key={goal.id} className="bg-slate-700 p-4 rounded-lg flex items-center justify-between">
                          <div className="w-full">
                            <div className="flex justify-between items-center mb-1">
                                <span className="font-semibold text-gray-200">{goal.name}</span>
                                <span className="text-xs text-slate-400">{getSymbol(baseCurrency)}{goal.currentAmount} / {getSymbol(baseCurrency)}{goal.targetAmount}</span>
                            </div>
                            <div className="w-full bg-slate-600 rounded-full h-2.5">
                              <div className="bg-teal-500 h-2.5 rounded-full transition-all duration-500" style={{ width: `${getGoalsProgress(goal)}%` }}></div>
                            </div>
                          </div>
                          <button onClick={() => handleDeleteGoal(goal.id)} className="ml-4 text-red-400 hover:text-red-500 transition-colors transform hover:scale-110">
                            <Trash2 className="w-5 h-5"/>
                          </button>
                        </div>
                      ))
                    ) : (
                      <p className="text-center text-slate-400">No goals added yet.</p>
                    )}
                  </div>
                  <form onSubmit={handleAddGoal} className="space-y-2">
                    <input type="text" value={newGoalName} onChange={(e) => setNewGoalName(e.target.value)} placeholder="Goal Name (e.g., New Laptop)" className="w-full p-3 rounded-lg bg-slate-700 border border-slate-600 text-gray-200 placeholder-slate-500 focus:outline-none focus:ring-2 focus:ring-blue-500"/>
                    <input type="number" value={newGoalTarget} onChange={(e) => setNewGoalTarget(e.target.value)} step="0.01" placeholder="Target Amount" className="w-full p-3 rounded-lg bg-slate-700 border border-slate-600 text-gray-200 placeholder-slate-500 focus:outline-none focus:ring-2 focus:ring-blue-500"/>
                    <button type="submit" className="w-full bg-teal-600 text-white font-bold py-3 px-6 rounded-lg hover:bg-teal-700 transition-colors shadow-lg">Add Goal</button>
                  </form>
                </div>
              </div>

              {/* Budget Tracker Section */}
              <div className="bg-slate-800 rounded-2xl p-6 shadow-xl">
                <h2 className="text-2xl font-bold mb-6 text-gray-100 flex items-center"><DollarSign className="w-7 h-7 mr-2"/>Budget Tracker</h2>
                <div className="space-y-4">
                  <form onSubmit={handleAddBudget} className="space-y-2">
                    <select value={selectedBudgetCategory} onChange={(e) => setSelectedBudgetCategory(e.target.value)} className="w-full p-3 rounded-lg bg-slate-700 border border-slate-600 text-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500">
                      {Object.values(categories).flat().map(c => (
                        <option key={c} value={c}>{c}</option>
                      ))}
                    </select>
                    <input type="number" value={budgetInput} onChange={(e) => setBudgetInput(e.target.value)} step="0.01" placeholder="Budget Amount" className="w-full p-3 rounded-lg bg-slate-700 border border-slate-600 text-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500"/>
                    <button type="submit" className="w-full bg-purple-600 text-white font-bold py-3 px-6 rounded-lg hover:bg-purple-700 transition-colors shadow-lg">Set Budget</button>
                  </form>
                  <div className="space-y-2">
                      {Object.keys(totals.budgetProgress).map(category => {
                          const progress = totals.budgetProgress[category];
                          const percentage = Math.min((progress.spent / progress.budget) * 100, 100).toFixed(0);
                          const isOverBudget = progress.spent > progress.budget;
                          return (
                              <div key={category} className="bg-slate-700 p-4 rounded-lg">
                                  <div className="flex justify-between items-center mb-1">
                                      <span className="font-semibold text-gray-200">{category}</span>
                                      <span className={`text-xs ${isOverBudget ? 'text-red-400' : 'text-slate-400'}`}>
                                          {getSymbol(baseCurrency)}{progress.spent.toFixed(2)} / {getSymbol(baseCurrency)}{progress.budget.toFixed(2)}
                                      </span>
                                  </div>
                                  <div className="w-full bg-slate-600 rounded-full h-2.5">
                                      <div className={`h-2.5 rounded-full transition-all duration-500 ${isOverBudget ? 'bg-red-500' : 'bg-green-500'}`} style={{ width: `${percentage}%` }}></div>
                                  </div>
                                </div>
                          );
                      })}
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div className="max-w-7xl mx-auto grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mt-8">
            <MortgageCalculator />
            <AiMortgageInsights />
          </div>
        </div>
      );
    };

    // Render the App component to the root element
    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(<App />);

  </script>
</body>
</html>